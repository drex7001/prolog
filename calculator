% advanced_calculator.pl

% Allow non-contiguous clauses for calculate/2
:- discontiguous calculate/2.

% Define basic arithmetic operations
calculate(add(X, Y), Result) :- Result is X + Y.
calculate(sub(X, Y), Result) :- Result is X - Y.
calculate(mul(X, Y), Result) :- Result is X * Y.
calculate(div(X, Y), Result) :- Y \= 0, Result is X / Y.

% Define advanced operations
calculate(exp(X, Y), Result) :- Result is X ** Y.
calculate(fact(X), Result) :- factorial(X, Result).

% Define trigonometric functions
calculate(sin(X), Result) :- Result is sin(X).
calculate(cos(X), Result) :- Result is cos(X).
calculate(tan(X), Result) :- Result is tan(X).

% Define logical operations
calculate(and(true, true), true).
calculate(and(_, _), false).

calculate(or(true, _), true).
calculate(or(_, true), true).
calculate(or(_, _), false).

calculate(not(true), false).
calculate(not(false), true).

% Define factorial
factorial(0, 1).
factorial(N, Result) :- 
    N > 0,
    N1 is N - 1,
    factorial(N1, F1),
    Result is N * F1.

% Parsing and evaluating expressions explicitly without call/1
evaluate(add(X, Y), Result) :- calculate(add(X, Y), Result).
evaluate(sub(X, Y), Result) :- calculate(sub(X, Y), Result).
evaluate(mul(X, Y), Result) :- calculate(mul(X, Y), Result).
evaluate(div(X, Y), Result) :- calculate(div(X, Y), Result).

evaluate(exp(X, Y), Result) :- calculate(exp(X, Y), Result).
evaluate(fact(X), Result) :- calculate(fact(X), Result).

evaluate(sin(X), Result) :- calculate(sin(X), Result).
evaluate(cos(X), Result) :- calculate(cos(X), Result).
evaluate(tan(X), Result) :- calculate(tan(X), Result).

evaluate(and(X, Y), Result) :- calculate(and(X, Y), Result).
evaluate(or(X, Y), Result) :- calculate(or(X, Y), Result).
evaluate(not(X), Result) :- calculate(not(X), Result).

% User interface to input and evaluate expressions
start :-
    write('Enter an expression: '),
    read(Expression),
    evaluate(Expression, Result),
    write('Result: '), write(Result), nl, 
    start.

% Start the calculator
:- start.
